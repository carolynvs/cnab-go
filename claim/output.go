package claim

import (
	"github.com/cnabio/cnab-go/bundle"
	"github.com/cnabio/cnab-go/bundle/definition"
)

// Output represents a bundle output generated by an operation.
type Output struct {
	Claim Claim

	// Result associated with the execution run that generated the output.
	Result Result

	// Name of the output.
	Name string

	// Data representing the output that is persisted to storage
	Value []byte
}

func (o Output) GetDefinition() (bundle.Output, bool) {
	def, ok := o.Claim.Bundle.Outputs[o.Name]
	return def, ok
}

func (o Output) GetSchema() (definition.Schema, bool) {
	if def, ok := o.GetDefinition(); ok {
		if schema, ok := o.Claim.Bundle.Definitions[def.Definition]; ok {
			return *schema, ok
		}
	}

	return definition.Schema{}, false
}

type Outputs struct {
	vals []*Output
	keys map[string]*Output
}

func NewOutputs() *Outputs {
	return &Outputs{
		vals: []*Output{},
		keys: map[string]*Output{},
	}
}

func (r *Outputs) GetByName(name string) (*Output, bool) {
	output, ok := r.keys[name]
	return output, ok
}

func (r *Outputs) GetByIndex(index int) (*Output, bool) {
	if index < 0 || index >= r.Len() {
		return nil, false
	}

	return r.vals[index], true
}

func (r *Outputs) Append(value Output) {
	r.keys[value.Name] = &value
	r.vals = append(r.vals, &value)
}

func (r *Outputs) Len() int {
	if r == nil {
		return 0
	}
	return len(r.vals)
}

func (r *Outputs) Less(i, j int) bool {
	return r.vals[i].Name < r.vals[j].Name
}

func (r *Outputs) Swap(i, j int) {
	r.vals[i], r.vals[j] = r.vals[j], r.vals[i]
}
