package claim

import (
	"fmt"
	"time"

	"github.com/pkg/errors"
)

// Result tracks the result of an operation on a CNAB installation
type Result struct {
	// Id of the result.
	ID string `json:"id"`

	// ClaimId associated with the claim that generated the result.
	ClaimID string `json:"claimId"`

	// Claim associated with the Result.
	// This is not stored in the Result document but can be loaded onto
	// the Result to build an in-memory hierarchy.
	// TODO: (carolynvs) can we keep this? if so remove output.claim and use this everywhere instead
	Claim Claim `json:"-"`

	// Created timestamp of the result.
	Created time.Time `json:"created"`

	// Message communicates the outcome of the operation.
	Message string `json:"message,omitempty"`

	// Status of the operation, for example StatusSucceeded.
	Status string `json:"status"`

	// OutputMetadata generated by the operation, mapping from the output names to
	// metadata about the output.
	OutputMetadata OutputMetadata `json:"outputs,omitempty"`

	// Outputs generated by the operation.
	// These are not stored in the Result document but can be loaded onto the
	// the Result to build an in-memory hierarchy.
	Outputs *Outputs `json:"-"`

	// Custom extension data applicable to a given runtime.
	Custom interface{} `json:"custom,omitempty"`
}

// Validate the Result
func (r Result) Validate() error {
	if r.ID == "" {
		return errors.New("the result id must be set")
	}

	if r.ClaimID == "" {
		return errors.New("the claimID must be set")
	}

	switch r.Status {
	case StatusCanceled, StatusFailed, StatusPending, StatusRunning, StatusSucceeded, StatusUnknown:
		return nil
	}
	return fmt.Errorf("invalid status: %s", r.Status)
}

type Results []Result

func (r Results) Len() int {
	return len(r)
}

func (r Results) Less(i, j int) bool {
	return r[i].ID < r[j].ID
}

func (r Results) Swap(i, j int) {
	r[i], r[j] = r[j], r[i]
}

// Outputs is the output metadata from an operation.
// Any metadata can be stored, however this provides methods
// for safely querying and retrieving well-known metadata.
type OutputMetadata map[string]interface{}

// GetContentDigest for the specified output.
func (o OutputMetadata) GetContentDigest(outputName string) (string, bool) {
	if output, ok := o[outputName]; ok {
		if outputMetadata, ok := output.(map[string]string); ok {
			contentDigest, ok := outputMetadata[OutputContentDigest]
			return contentDigest, ok
		}
	}

	return "", false
}

// SetContentDigest for the specified output.
func (o OutputMetadata) SetContentDigest(outputName string, contentDigest string) error {
	output, ok := o[outputName]
	if !ok {
		output = map[string]string{
			OutputContentDigest: contentDigest,
		}
		o[outputName] = output
		return nil
	}

	outputMetadata, ok := output.(map[string]string)
	if !ok {
		return errors.Errorf("cannot set the claim result's Outputs[%s][%s] because it is not type map[string]string but %T", outputName, OutputContentDigest, output)
	}

	outputMetadata[OutputContentDigest] = contentDigest
	return nil
}
